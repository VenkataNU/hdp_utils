---
- name: Taking stat of {{ hdf_tar_name }} 
  stat:
    path: "{{ hdf_patch_local_path }}/{{ hdf_tar_name }}"
  register: hdf_patch_file_result
  tags:
  - prerequisites

- block:
  - name: Get the HDF tar file from the repo
    get_url:
      url: "{{ hdf_patch_repo_url }}/{{ hdf_tar_name }}"
      dest: "{{ hdf_patch_local_path }}/{{ hdf_tar_name }}"
      owner: root
      group: root
      mode: 0755
    async: 6000
    poll: 0
    register: hdf_patch_download_result
    tags:
    - prerequisites

  - name: check status of HDF tar file download
    async_status:
      jid: "{{ hdf_patch_download_result.ansible_job_id }}"
    register: hdf_patch_download_job_result
    until: hdf_patch_download_job_result.finished
    retries: 300
  when: hdf_patch_file_result.stat.exists == False

- name: Unarchive the HDF tar file
  unarchive:
    src: "{{ hdf_patch_local_path }}/{{ hdf_tar_name }}"
    dest: "{{ hdf_patch_local_path }}"
    owner: root
    group: root
    mode: 0755
  when: (patch_unarchived|default(''))!='yes'
  tags:
  - prerequisites

- name: Stop the HDF services before applying the patch
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/services/{{ item }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: "[{\"RequestInfo\":{\"context\":\"Stop {{ item }} via REST\"},\"Body\":{\"ServiceInfo\":{\"state\":\"INSTALLED\"}}}]|to_json"
    body_format: raw
    status_code: 200,201,202
    timeout: 60
    return_content: no
  loop:  "{{ hdf_services_list.split(',') }}"
  notify: "Wait for the components to stop"
  tags:
  - stop_hdf_components

- name: Wait for the components to stop
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/services/{{ item }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
    register: component_status
    debug: component_status
  register: component_status
  until: ((component_status.content|from_json).ServiceInfo.state == 'INSTALLED'  or
       (component_status.content|from_json).ServiceInfo.state == 'STOPPED' )
  retries: "{{ hdf_patch_wait_timeout // 10 }}"
  delay: 10
  loop:  "{{ hdf_services_list.split(',') }}"
  tags:
  - stop_hdf_components

- meta: flush_handlers

- name: Stop ambari-server
  command: /usr/sbin/ambari-server stop
  tags:
  - stop_ambari_server

- meta: flush_handlers

- name: Take Ambari resources directory backup and archive it
  archive:
   path: "/var/lib/ambari-server/resources"
   dest: "/var/lib/ambari-server/resources.backup{{ansible_date_time.epoch}}.gz"
   owner: root
   group: root
   mode: 0755
  tags:
  - backup

- name: Take database backup 
  mysql_db:
    state: dump
    login_host: "{{ db_login_host }}"
    login_user: "{{ db_login_user }}"
    login_password: "{{ db_login_pass }}"
    name: all 
    target: "{{ db_backup_dir }}/hdf_upgrade_db_backup_{{ansible_date_time.epoch}}.sql"
  tags:
  - backup

- name: Uninstall the existing HDF Management Pack
  command: /usr/sbin/ambari-server uninstall-mpack --mpack=hdf-ambari-mpack
  tags:
  - install

- name: Install the HDF Management Pack
  command: "/usr/sbin/ambari-server install-mpack --mpack={{ hdf_patch_local_path }}/{{ hdf_mpack_tar_internal_path }}/{{ mpack_patch_filename }}"
  args:
    creates: "/var/lib/ambari-server/resources/mpacks/{{ mpack_patch_filename | regex_replace('.tar.gz$','') }}"
  tags:
  - install

- name: change folder ownership of ambari server resource directory to {{ ambari_runas_user }} user
  file:
    path: "/var/lib/ambari-server/resources/mpacks"
    state: directory
    recurse: yes
    owner: "{{ ambari_runas_user }}"
    group: "{{ ambari_runas_user_group }}"
  notify: Restart ambari-server
  tags:
  - install

- meta: flush_handlers

- name: Get the current repo version file from cluster
  uri:
     url: 'http://{{ ansible_fqdn }}:8080/api/v1/stacks/HDP/versions/{{ hdp_minor_version }}/repository_versions/1/operating_systems/redhat7?fields=repositories/*'
     method: GET
     force_basic_auth: yes
     user: "{{ ambari_admin_user }}"
     password: "{{ ambari_admin_password }}"
     headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
     status_code: 200
     dest: "{{ hdf_repo_version_file }}"
  tags:
  - install

- name: Insert first line in "{{ hdf_repo_version_file }}" file
  lineinfile:
      path: "{{ hdf_repo_version_file }}"
      line: '{"operating_systems":['
      insertbefore: BOF
  tags:
  - install

- name: Change HDF version line in  "{{ hdf_repo_version_file }}" file
  lineinfile:
      path: "{{ hdf_repo_version_file }}"
      regexp: '^\s*\"base_url\"\s*:\s*\"http[s]?://[\w:.-]*/HDF/[\w:./-]*\"\s*,\s*$'
      line: ' "base_url" :  "{{ hdf_patch_repo_url }}",'
      state: present
      backrefs: yes
  tags:
  - install

- name: Insert last line in "{{ hdf_repo_version_file }}" file
  lineinfile:
      path: "{{ hdf_repo_version_file }}"
      line: ']}'
      insertafter: EOF
  tags:
  - install

- name: change file permissions of "{{ hdf_repo_version_file }}" file
  file:
    path: "{{ hdf_repo_version_file }}"
    mode: '0655'
  tags:
  - install

- name: Update HDF repository base url
  uri:
     url: "http://{{ ansible_fqdn }}:8080/api/v1/stacks/HDP/versions/{{ hdp_minor_version }}/repository_versions/1"
     method: PUT
     force_basic_auth: yes
     user: "{{ ambari_admin_user }}"
     password: "{{ ambari_admin_password }}"
     headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
     body: "{{ lookup('file', '{{ hdf_repo_version_file }}')|to_json }}"
     status_code: 200
  tags:
  - install

- name: Start the HDF services after applying the patch
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/services/{{ item }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: "[{\"RequestInfo\":{\"context\":\"Stop {{ item }} via REST\"},\"Body\":{\"ServiceInfo\":{\"state\":\"STARTED\"}}}]|to_json"
    body_format: raw
    status_code: 200,201,202
    timeout: 60
    return_content: no
  loop:  "{{ hdf_services_list.split(',') }}"
  notify: "Wait for the components to start"
  tags:
  - start_hdf_components

- name: Wait for the components to start
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/services/{{ item }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
    register: component_status
    debug: component_status
  register: component_status
  until: ((component_status.content|from_json).ServiceInfo.state == 'STARTED')
  retries: "{{ hdf_patch_wait_timeout // 10 }}"
  delay: 10
  loop:  "{{ hdf_services_list.split(',') }}"
  tags:
  - start_hdf_components

